/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

/**
 * @file
 *  Auto-generated complete impulse definitions. The ei_impulse_handle_t should
 *  be passed to ei_run_classifier() function to use this specific impulse.
 *  This file should only be included in ei_run_classifier.h file.
 */

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_51.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

const char* ei_classifier_inferencing_categories[] = { "0", "1", "2", "3", "4", "5" };

EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_50_axes[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 };
const uint32_t ei_dsp_config_50_axes_size = 144;
ei_dsp_config_raw_t ei_dsp_config_50 = {
    50, // uint32_t blockId
    1, // int implementationVersion
    144, // int length of axes
    1.0f // float scale-axes
};

const uint8_t ei_dsp_blocks_size = 1;
ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
    { // DSP block 50
        50,
        144, // output size
        &extract_raw_features, // DSP function pointer
        (void*)&ei_dsp_config_50, // pointer to config struct
        ei_dsp_config_50_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_50_axes_size, // number of axes
        1, // version
        nullptr, // factory function
    }
};
const ei_config_tflite_graph_t ei_config_tflite_graph_51 = {
    .implementation_version = 1,
    .model = tflite_learn_51,
    .model_size = tflite_learn_51_len,
    .arena_size = tflite_learn_51_arena_size
};

ei_learning_block_config_tflite_graph_t ei_learning_block_config_51 = {
    .implementation_version = 1,
    .classification_mode = EI_CLASSIFIER_CLASSIFICATION_MODE_CLASSIFICATION,
    .block_id = 51,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .threshold = 0,
    .quantized = 0,
    .compiled = 0,
    .graph_config = (void*)&ei_config_tflite_graph_51
};

const uint8_t ei_learning_blocks_size = 1;
const uint32_t ei_learning_block_51_inputs[1] = { 50 };
const uint8_t ei_learning_block_51_inputs_size = 1;
const ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
    {
        51,
        false,
        &run_nn_inference,
        (void*)&ei_learning_block_config_51,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_51_inputs,
        ei_learning_block_51_inputs_size,
        6
    },
};

const size_t ei_postprocessing_blocks_size = 0;
const ei_postprocessing_block_t *ei_postprocessing_blocks = nullptr;

const ei_object_detection_nms_config_t ei_object_detection_nms = {
    0.0f, /* NMS confidence threshold */
    0.2f  /* NMS IOU threshold */
};

const ei_impulse_t impulse_285946_0 = {
    .project_id = 285946,
    .project_owner = "iREHAB",
    .project_name = "GestureClassification",
    .impulse_id = 1,
    .impulse_name = "Impulse #1",
    .deploy_version = 29,

    .nn_input_frame_size = 144,
    .raw_sample_count = 1,
    .raw_samples_per_frame = 144,
    .dsp_input_frame_size = 1 * 144,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 1,
    .frequency = 0,
    .dsp_blocks_size = ei_dsp_blocks_size,
    .dsp_blocks = ei_dsp_blocks,
    
    .object_detection_count = 0,
    .fomo_output_size = 0,

    
    .visual_ad_grid_size_x = 0,
    .visual_ad_grid_size_y = 0,
    
    .tflite_output_features_count = 6,
    .learning_blocks_size = ei_learning_blocks_size,
    .learning_blocks = ei_learning_blocks,

    .postprocessing_blocks_size = ei_postprocessing_blocks_size,
    .postprocessing_blocks = ei_postprocessing_blocks,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "axis0 + axis1 + axis2 + axis3 + axis4 + axis5 + axis6 + axis7 + axis8 + axis9 + axis10 + axis11 + axis12 + axis13 + axis14 + axis15 + axis16 + axis17 + axis18 + axis19 + axis20 + axis21 + axis22 + axis23 + axis24 + axis25 + axis26 + axis27 + axis28 + axis29 + axis30 + axis31 + axis32 + axis33 + axis34 + axis35 + axis36 + axis37 + axis38 + axis39 + axis40 + axis41 + axis42 + axis43 + axis44 + axis45 + axis46 + axis47 + axis48 + axis49 + axis50 + axis51 + axis52 + axis53 + axis54 + axis55 + axis56 + axis57 + axis58 + axis59 + axis60 + axis61 + axis62 + axis63 + axis64 + axis65 + axis66 + axis67 + axis68 + axis69 + axis70 + axis71 + axis72 + axis73 + axis74 + axis75 + axis76 + axis77 + axis78 + axis79 + axis80 + axis81 + axis82 + axis83 + axis84 + axis85 + axis86 + axis87 + axis88 + axis89 + axis90 + axis91 + axis92 + axis93 + axis94 + axis95 + axis96 + axis97 + axis98 + axis99 + axis100 + axis101 + axis102 + axis103 + axis104 + axis105 + axis106 + axis107 + axis108 + axis109 + axis110 + axis111 + axis112 + axis113 + axis114 + axis115 + axis116 + axis117 + axis118 + axis119 + axis120 + axis121 + axis122 + axis123 + axis124 + axis125 + axis126 + axis127 + axis128 + axis129 + axis130 + axis131 + axis132 + axis133 + axis134 + axis135 + axis136 + axis137 + axis138 + axis139 + axis140 + axis141 + axis142 + axis143",
    .slice_size = (1/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 6,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_285946_0 = ei_impulse_handle_t( &impulse_285946_0 );
ei_impulse_handle_t& ei_default_impulse = impulse_handle_285946_0;

#endif // _EI_CLASSIFIER_MODEL_VARIABLES_H_
